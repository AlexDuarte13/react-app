{"ast":null,"code":"import * as cookie from 'react-cookies';\nimport * as jwt from 'jsonwebtoken';\nimport axios from 'axios';\nexport const doAuthentication = (username, password) => {\n  const url = \"http://\" + window.location.hostname + \":9094/authorization/login/\";\n  return axios.post(url, {\n    username: username,\n    password: password\n  }).then(res => {\n    // then print response status\n    if (res && res.data && res.status === 202) {\n      const jwtDecoded = jwt.decode(res.data, {\n        complete: true,\n        json: true\n      });\n      const expireDate = new Date(jwtDecoded.payload.expirationDate);\n      cookie.save('user_login', jwtDecoded.payload, {\n        path: '/',\n        expires: expireDate\n      });\n      return \"authorized\";\n    } else if (res.status === 401) {\n      cookie.remove('user_login');\n      return \"unauthorized\";\n    } else {\n      cookie.remove('user_login');\n      return \"error\";\n    }\n  }).catch(error => {\n    return \"error\";\n  });\n};\nexport const isAuthenticated = rest => {\n  const user_login = cookie.load('user_login');\n\n  if (user_login && user_login.user && rest.role === user_login.user.profile && user_login.expirationDate > Date.now()) {\n    //o usuário é válido E está o cookie está na validade E o perfil tem acesso à url requisitada\n    return true;\n  } else {\n    cookie.remove('user_login');\n    return false;\n  }\n};","map":{"version":3,"sources":["/home/braddock/Documents/dev/ebix/works/ebix-easi-app/src/auth.js"],"names":["cookie","jwt","axios","doAuthentication","username","password","url","window","location","hostname","post","then","res","data","status","jwtDecoded","decode","complete","json","expireDate","Date","payload","expirationDate","save","path","expires","remove","catch","error","isAuthenticated","rest","user_login","load","user","role","profile","now"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAEtD,QAAMC,GAAG,GAAG,YAAUC,MAAM,CAACC,QAAP,CAAgBC,QAA1B,GAAmC,4BAA/C;AAEA,SAAOP,KAAK,CAACQ,IAAN,CAAWJ,GAAX,EAAgB;AAACF,IAAAA,QAAQ,EAAEA,QAAX;AAAqBC,IAAAA,QAAQ,EAAEA;AAA/B,GAAhB,EAA0DM,IAA1D,CAA+DC,GAAG,IAAI;AAAE;AAE3E,QAAGA,GAAG,IAAIA,GAAG,CAACC,IAAX,IAAmBD,GAAG,CAACE,MAAJ,KAAe,GAArC,EAA0C;AAExC,YAAMC,UAAU,GAAGd,GAAG,CAACe,MAAJ,CAAWJ,GAAG,CAACC,IAAf,EAAqB;AAAEI,QAAAA,QAAQ,EAAE,IAAZ;AAAkBC,QAAAA,IAAI,EAAE;AAAxB,OAArB,CAAnB;AAEA,YAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASL,UAAU,CAACM,OAAX,CAAmBC,cAA5B,CAAnB;AAEAtB,MAAAA,MAAM,CAACuB,IAAP,CAAa,YAAb,EAA2BR,UAAU,CAACM,OAAtC,EAA+C;AAAEG,QAAAA,IAAI,EAAE,GAAR;AAAcC,QAAAA,OAAO,EAAEN;AAAvB,OAA/C;AAEA,aAAQ,YAAR;AAED,KAVD,MAUO,IAAIP,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AAE7Bd,MAAAA,MAAM,CAAC0B,MAAP,CAAc,YAAd;AAEA,aAAQ,cAAR;AAED,KANM,MAMA;AAEL1B,MAAAA,MAAM,CAAC0B,MAAP,CAAc,YAAd;AAEA,aAAQ,OAAR;AAED;AAEJ,GA1BM,EA0BJC,KA1BI,CA0BEC,KAAK,IAAI;AAEhB,WAAQ,OAAR;AAED,GA9BM,CAAP;AAgCD,CApCM;AAsCP,OAAO,MAAMC,eAAe,GAAIC,IAAD,IAAU;AAEvC,QAAMC,UAAU,GAAG/B,MAAM,CAACgC,IAAP,CAAY,YAAZ,CAAnB;;AAEA,MAAGD,UAAU,IAAIA,UAAU,CAACE,IAAzB,IAAiCH,IAAI,CAACI,IAAL,KAAcH,UAAU,CAACE,IAAX,CAAgBE,OAA/D,IAA2EJ,UAAU,CAACT,cAAX,GAA4BF,IAAI,CAACgB,GAAL,EAA1G,EAAuH;AACrH;AACE,WAAO,IAAP;AACH,GAHD,MAGO;AACHpC,IAAAA,MAAM,CAAC0B,MAAP,CAAc,YAAd;AACA,WAAO,KAAP;AACH;AAEF,CAZM","sourcesContent":["import * as cookie from 'react-cookies';\nimport * as jwt from 'jsonwebtoken';\nimport axios from 'axios';\n\nexport const doAuthentication = (username, password) => {\n\n  const url = \"http://\"+window.location.hostname+\":9094/authorization/login/\";\n\n  return axios.post(url, {username: username, password: password}).then(res => { // then print response status\n\n      if(res && res.data && res.status === 202) {\n\n        const jwtDecoded = jwt.decode(res.data, { complete: true, json: true } );\n\n        const expireDate = new Date(jwtDecoded.payload.expirationDate);\n\n        cookie.save( 'user_login', jwtDecoded.payload, { path: '/' , expires: expireDate } );\n\n        return  \"authorized\";\n        \n      } else if (res.status === 401) {\n\n        cookie.remove('user_login');\n\n        return  \"unauthorized\";\n\n      } else {\n\n        cookie.remove('user_login');\n\n        return  \"error\";\n\n      }\n\n  }).catch(error => {\n\n    return  \"error\";\n\n  });\n\n}\n\nexport const isAuthenticated = (rest) => {\n\n  const user_login = cookie.load('user_login');\n\n  if(user_login && user_login.user && rest.role === user_login.user.profile && (user_login.expirationDate > Date.now())) {\n    //o usuário é válido E está o cookie está na validade E o perfil tem acesso à url requisitada\n      return true;\n  } else {\n      cookie.remove('user_login');\n      return false;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}