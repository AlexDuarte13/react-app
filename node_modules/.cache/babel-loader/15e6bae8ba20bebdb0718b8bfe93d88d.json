{"ast":null,"code":"import * as cookie from 'react-cookies';\nimport * as jwt from 'jsonwebtoken';\nimport axios from 'axios';\nexport const doAuthentication = (username, password) => {\n  const url = \"http://\" + window.location.hostname + \":9094/authorization/login/\";\n  return axios.post(url, {\n    username: username,\n    password: password\n  }, {\n    crossDomain: true\n  }).then(res => {\n    // then print response status\n    if (res && res.data && res.status === 202) {\n      const jwtDecoded = jwt.decode(res.data, {\n        complete: true,\n        json: true\n      });\n      const expireDate = new Date(jwtDecoded.payload.expirationDate);\n      const user_login = jwtDecoded.payload;\n      user_login.jwt = res.data;\n      cookie.save('user_login', user_login, {\n        path: '/',\n        expires: expireDate\n      });\n      return {\n        forward_permission: \"authorized\",\n        user_login: jwtDecoded.payload.user\n      };\n    } else {\n      cookie.remove('user_login');\n      return {\n        forward_permission: \"error\"\n      };\n    }\n  }).catch(error => {\n    cookie.remove('user_login');\n\n    if (error.response && error.response.status === 401) {\n      return {\n        forward_permission: \"unauthorized\"\n      };\n    } else {\n      return {\n        forward_permission: \"error\"\n      };\n    }\n  });\n};\nexport const isAuthenticated = rest => {\n  const user_login = cookie.load('user_login');\n\n  if (user_login && user_login.user && rest.role === user_login.user.profile && user_login.expirationDate > Date.now()) {\n    //o usuário é válido E está o cookie está na validade E o perfil tem acesso à url requisitada\n    return true;\n  } else {\n    cookie.remove('user_login');\n    return false;\n  }\n};\nexport const registerUser = user => {\n  const url = \"http://\" + window.location.hostname + \":9094/authorization/register/\";\n  const user_login = cookie.load('user_login');\n  return axios.post(url, user, {\n    crossDomain: true,\n    headers: {\n      'token': user_login.jwt\n    }\n  }).then(res => {\n    return {\n      data: res.data,\n      status: res.status,\n      statusText: res.statusText\n    };\n  }).catch(error => {\n    return {\n      data: error.response.data,\n      error: error\n    };\n  });\n};","map":{"version":3,"sources":["/home/braddock/Documents/dev/ebix/works/ebix-easi-app/src/auth.js"],"names":["cookie","jwt","axios","doAuthentication","username","password","url","window","location","hostname","post","crossDomain","then","res","data","status","jwtDecoded","decode","complete","json","expireDate","Date","payload","expirationDate","user_login","save","path","expires","forward_permission","user","remove","catch","error","response","isAuthenticated","rest","load","role","profile","now","registerUser","headers","statusText"],"mappings":"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","sourcesContent":["import * as cookie from 'react-cookies';\nimport * as jwt from 'jsonwebtoken';\nimport axios from 'axios';\n\nexport const doAuthentication = (username, password) => {\n\n  const url = \"http://\"+window.location.hostname+\":9094/authorization/login/\";\n\n  return axios.post( url, { username: username, password: password }, { crossDomain: true } ).then(res => { // then print response status\n\n      if(res && res.data && res.status === 202) {\n\n        const jwtDecoded = jwt.decode(res.data, { complete: true, json: true } );\n\n        const expireDate = new Date(jwtDecoded.payload.expirationDate);\n\n        const user_login = jwtDecoded.payload;\n        \n        user_login.jwt = res.data\n\n        cookie.save( 'user_login', user_login, { path: '/' , expires: expireDate } );\n\n        return  { forward_permission: \"authorized\", user_login: jwtDecoded.payload.user };\n        \n      }  else {\n\n        cookie.remove('user_login');\n\n        return  { forward_permission: \"error\" };\n\n      }\n\n  }).catch(error => {\n    \n    cookie.remove('user_login');\n\n    if (error.response && error.response.status === 401) {\n\n      return  { forward_permission: \"unauthorized\" };\n\n    } else {\n\n      return  { forward_permission: \"error\" };\n\n    }\n\n  });\n\n}\n\nexport const isAuthenticated = (rest) => {\n\n  const user_login = cookie.load('user_login');\n\n  if(user_login && user_login.user && rest.role === user_login.user.profile && (user_login.expirationDate > Date.now())) {\n    //o usuário é válido E está o cookie está na validade E o perfil tem acesso à url requisitada\n      return true;\n  } else {\n      cookie.remove('user_login');\n      return false;\n  }\n\n}\n\nexport const registerUser = (user) => {\n\n  const url = \"http://\"+window.location.hostname+\":9094/authorization/register/\";\n\n  const user_login = cookie.load('user_login');\n\n  return axios.post( url, user, { crossDomain: true, headers: { 'token': user_login.jwt } } )\n    .then(res => { \n\n      return {\n        data: res.data, \n        status: res.status, \n        statusText: res.statusText };\n\n    })\n    .catch(error => {\n\n      return  {\n        data: error.response.data, \n        error: error\n      };\n\n    });\n\n}\n"]},"metadata":{},"sourceType":"module"}